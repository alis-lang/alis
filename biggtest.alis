/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
/// Example module doc
fn add(int x, int y) -> x + y;

fn identity $($type T)(T value) -> T {
	/// returns the input value
	return value;
}

struct Point {
	int x = 0;
	int y = 0;
}

union Value {
	#meta1 pub int intVal = 0;
	#meta2 pub float floatVal = 0.0;
}

enum auto Kind {
	None,
	Simple,
	Complex = 10
}

alias Num = i32;

template combine $($type T, $type U) {
	fn combine(T a, U b) -> (a, b);
}

fn usePoint() -> auto{
	var auto p = { x = 10, y = 20 };
	if (p.x > 5) {
		//p.y += 1;
	} else {
		//p.y -= 1;
	}
}

$if true {
	fn compileTime() -> 42;
} else {
	fn compileTime() -> 0;
}

$for (i; auto _; i < 10) {
	fn loopFn() -> i;
}

/*switch (42)
case a {
	var auto result = "one"
}
case b {
	var auto result = "two"
}
case _ {
	var auto result = "other"
}*/


// Test case
utest "math" {
	#def fn test_add() -> void{
		var auto result = add(2, 3);
	}
}
